import pandas as pd

# 1) Загрузить данные (read_csv())
data = pd.read_csv("math_students.csv")

# 2) Вывести первые и последние 10 строк таблицы (head(), tail())
print("Первые 10 строк:")
print(data.head(10))
print("\nПоследние 10 строк:")
print(data.tail(10))

# 3) Вывести число объектов и их характеристик
print("\nКоличество объектов и их характеристики:")
print(data.shape)

# 4) Вывести названий всех колонок
print("\nНазвание колонок:")
print(data.columns)

# 5) Есть ли в данных пропуски
print("\nПроверка на наличие пробелов:")
print(data.isnull().any().any())

# 6) Вывести статистику по значениям признаков
print("\nВывести статистику по значениям признаков:")
print(data.describe())

# 7) Вывести более подробное описание значений признаков (количество непустых значений, типов столбцов и объема занимаемой памяти)
print("\nПодробное описание значений признаков:")
print(data.info())

# 8) Какие значения принимает признак одни из признаков (например, Fjob)? (какие именно значения, сколько уникальных, сколько значений каждого типа)
print("\nЗначения признака Fjob:")
print(data['Fjob'].unique())

# 9) Вывести только тех студентов, у которых опекуном является отец, и который работает врачом или инженером.
selected_students = data[(data['guardian'] == 'father') & (data['Fjob'].isin(['doctor', 'engineer']))]
print("\nВывести только тех студентов, у которых опекуном является отец, и который работает врачом или инженером.")
print(selected_students)

# 10) Создать признак "study_time_ratio", который будет отражать соотношение времени, затраченного на учебу (study_time), к общему времени, затраченному на учебу и досуг (study_time + leisure_time).
data['study_time_ratio'] = data['studytime'] / (data['studytime'] + data['freetime'])

# 11) Вывести новый размер, новые колонки
print("\nНовый размер и колонки:")
print(data.shape)
print(data.columns)

# 12) Вывести наиболее распространенное количество несданных предметов
print("\nНаиболее распространенное количество несданных предметов:")
print(data['failures'].mode().iloc[0])

# 13) Найдите количество студентов, чья мать и отец работают.
working_parents_count = data[(data['Mjob'].isin(['teacher', 'health', 'services', 'at_home', 'other']))
                            & (data['Fjob'].isin(['teacher', 'health', 'services', 'at_home', 'other']))].shape[0]
print("\nКоличество студентов, чья мать и отец работают.:", working_parents_count)

# 14) Найдите максимальный возраст студентов, у которых оба родителя работают в сфере услуг (полиции)
max_age = data[(data['Mjob'].isin(['services', 'police'])) & (data['Fjob'].isin(['services', 'police']))]['age'].max()
print("\nМаксимальный возраст студентов, у которых оба родителя работают в сфере услуг (полиции):", max_age)

# 15) Найдите количество студентов, имеющих оценку за первый семестр выше среднего балла.
above_average_count = data[data['G1'] > data['G1'].mean()].shape[0]
print("\nКоличество студентов, имеющих оценку за первый семестр выше среднего балла.:", above_average_count)

# 16) Разделите студентов на две группы: те, у которых матери имеют высшее образование, и те, у которых матери не имеют высшего образования. Сравните средние итоговые оценки между этими двумя группами.
grouped_data = data.groupby('Medu')['G3'].mean()
print("\nРезультат деления студентов на две группы:")
print(grouped_data)
